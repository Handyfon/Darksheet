{"name":"Burnout","permission":{"default":0,"XfTRUgWWwiNixOB9":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.TAO8l552CS2PLH0q"}},"scope":"global","command":"// Rolling table, from best to worst\n            const rollings = ['12', '10', '8', '6', '4'];\n            // Value of the burnoutdice\n            let burnoutdie = canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value;\n            // find the table\n            let table = game.tables.entities.find(t => t.data.name === \"Burnout Consequence\");\n            // burnoutsettings\n            let bsettings = canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value\n            // magic region\n            var regionmod = parseInt(canvas.tokens.controlled[0].actor.data.data.attributes.regionmod.value, 10);\n            //console.log(\"Regionmod: \"+regionmod);\n            // burnoutdice changed through region\n            if (regionmod < 0) {\n                var regionmodz = rollings.indexOf(canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value) - parseInt(regionmod);\n                //console.log(\"Regionmodz step2 kleiner: \"+regionmodz);\n                if (regionmodz >= 5) {\n                    regionmodz = 4;\n                }\n            } else {\n                var regionmodz = rollings.indexOf(canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value) - parseInt(regionmod);\n                //console.log(\"Regionmodz step3 größer: \"+regionmodz);\n                if (regionmodz <= 0) {\n                    regionmodz = 0;\n                }\n            }\n            var burnoutARegion = rollings[regionmodz];\n            let rollcon = burnoutARegion;\n            let rollcona = \"d\" + rollcon\n            let roll = new Roll(`${rollcona}`).roll();\n            const result = table.roll()\n\n\n\n            if (burnoutdie === 0) {} else {\n                let content = `\n\t\t\t\t<div class=\"dnd5e chat-card item-card\" data-acor-id=\"${canvas.tokens.controlled[0].actor._id}\">\n\t\t\t\t\t<header class=\"card-header flexrow\">\n\t\t\t\t\t\t<img src=\"${canvas.tokens.controlled[0].actor.data.token.img}\" title=\"\" width=\"36\" height=\"36\" style=\"border: none;\"/>\n\t\t\t\t\t\t<h3>Burnoutdice(${rollcona}): </h3>\n\t\t\t\t\t<h3>${roll.result}</h3>\n\t\t\t\t\t</header>\n\t\t\t\t</div>`;\n                let content2 = `\n\t\t\t\t<div class=\"dnd5e chat-card item-card\" data-acor-id=\"${canvas.tokens.controlled[0].actor._id}\">\n\t\t\t\t\t<header class=\"card-header flexrow\">\n\t\t\t\t\t\t<img src=\"${canvas.tokens.controlled[0].actor.data.token.img}\" title=\"\" width=\"36\" height=\"36\" style=\"border: none;\"/>\n\t\t\t\t\t\t<h3>Burnoutdice(${rollcona}): </h3>\n\t\t\t\t\t<h3 style=\"color: #ff0000;text-shadow: 0 0 2px;\">${roll.result}</h3>\n\t\t\t\t\t</header>\n\t\t\t\t\t</br>\n\t\t\t\t\t<h3 style=\"color: #ff0000;text-shadow: 0 0 2px; text-align: center;\">${result.results[0].text}</h3>\n\t\t\t\t</div>`;\n                let content3 = `\n\t\t\t\t<div class=\"dnd5e chat-card item-card\" data-acor-id=\"${canvas.tokens.controlled[0].actor._id}\">\n\t\t\t\t\t<header class=\"card-header flexrow\">\n\t\t\t\t\t\t<img src=\"${canvas.tokens.controlled[0].actor.data.token.img}\" title=\"\" width=\"36\" height=\"36\" style=\"border: none;\"/>\n\t\t\t\t\t\t<h3>Burnoutdice(${rollcona}): </h3>\n\t\t\t\t\t<h3 style=\"color: #ff0000;text-shadow: 0 0 2px;\">${roll.result}</h3>\n\t\t\t\t\t</header>\n\t\t\t\t</div>`;\n                let rollWhisper = null;\n                let rollBlind = false;\n                let rollMode = game.settings.get(\"core\", \"rollMode\");\n                if ([\"gmroll\", \"blindroll\"].includes(rollMode)) rollWhisper = ChatMessage.getWhisperRecipients(\"GM\")\n                if (rollMode === \"blindroll\") rollBlind = true;\n                if (roll.result <= 2) {\n                    if (bsettings) {\n                        ChatMessage.create({\n                            user: game.user._id,\n                            content: content2,\n                            speaker: {\n                                actor: canvas.tokens.controlled[0].actor._id,\n                                token: canvas.tokens.controlled[0].actor.token,\n                                alias: canvas.tokens.controlled[0].actor.name\n                            },\n\n                            sound: CONFIG.sounds.dice,\n                            flags: {\n                                darksheet: {\n                                    outcome: 'bad'\n                                }\n                            }\n                        });\n                    } else {\n                        ChatMessage.create({\n                            user: game.user._id,\n                            content: content3,\n                            speaker: {\n                                actor: canvas.tokens.controlled[0].actor._id,\n                                token: canvas.tokens.controlled[0].actor.token,\n                                alias: canvas.tokens.controlled[0].actor.name\n                            },\n\n                            sound: CONFIG.sounds.dice,\n                            flags: {\n                                darksheet: {\n                                    outcome: 'bad'\n                                }\n                            }\n                        });\n                    }\n                    // Lower burnoutdie rank\n                    const new_burnoutdie = rollings.indexOf(canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value) + 1;\n                    if (new_burnoutdie < rollings.length) {\n                        canvas.tokens.controlled[0].actor.data.data.attributes.burnout.value = rollings[new_burnoutdie];\n                    }\n                    canvas.tokens.controlled[0].render();\n                } else {\n                    ChatMessage.create({\n                        user: game.user._id,\n                        content: content,\n                        speaker: {\n                            actor: canvas.tokens.controlled[0].actor._id,\n                            token: canvas.tokens.controlled[0].actor.token,\n                            alias: canvas.tokens.controlled[0].actor.name\n                        },\n                        sound: CONFIG.sounds.dice\n                    });\n                }\n            }","author":"XfTRUgWWwiNixOB9","img":"icons/svg/d20-black.svg","actorIds":[],"_id":"HbIPY2d2GO5AqCtb"}
